pipeline {
    agent any

    environment {
        FRONTEND_IMAGE      = "kartheekchadaram12/fusionpact-devops-challenge-frontend:latest"
        BACKEND_IMAGE       = "kartheekchadaram12/fusionpact-devops-challenge-backend:latest"
        FRONTEND_CONTAINER  = "frontend"
        BACKEND_CONTAINER   = "backend"
        DOCKER_REGISTRY     = "docker.io" // Change if using another registry
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "Cloning repository..."
                git url: 'https://github.com/kartheekchadaram12/fusionpact-devops-challenge.git', branch: 'main'
            }
        }

        stage('Build & Test Backend') {
            steps {
                echo "Installing backend dependencies..."
                sh '''
                cd backend
                pip install --no-cache-dir -r requirements.txt
                '''
            }
        }

        stage('Build Docker Images') {
            steps {
                echo "Building frontend Docker image..."
                sh "docker build -t ${FRONTEND_IMAGE} ./frontend"

                echo "Building backend Docker image..."
                sh "docker build -t ${BACKEND_IMAGE} ./backend"
            }
        }

        stage('Push Docker Images') {
            steps {
                echo "Logging in to Docker Hub..."
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }

                echo "Pushing frontend image..."
                sh "docker push ${FRONTEND_IMAGE}"

                echo "Pushing backend image..."
                sh "docker push ${BACKEND_IMAGE}"
            }
        }

        stage('Stop & Remove Old Containers') {
            steps {
                echo "Stopping and removing old containers..."
                sh '''
                docker rm -f ${FRONTEND_CONTAINER} || true
                docker rm -f ${BACKEND_CONTAINER}  || true
                '''
            }
        }

        stage('Deploy Containers') {
            steps {
                echo "Deploying backend container..."
                sh "docker run -d --name ${BACKEND_CONTAINER} -p 8000:8000 ${BACKEND_IMAGE}"

                echo "Deploying frontend container..."
                sh "docker run -d --name ${FRONTEND_CONTAINER} -p 80:80 --link ${BACKEND_CONTAINER} ${FRONTEND_IMAGE}"
            }
        }

        stage('Verify Deployment') {
            steps {
                echo "Checking running containers..."
                sh "docker ps"
            }
        }
    }

    post {
        success {
            echo "CI/CD Pipeline: Deployment Succeeded!"
        }
        failure {
            echo "CI/CD Pipeline: Deployment Failed!"
        }
    }
}
